palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
shiny::runApp('Documents/J Balvin Project/Web App')
uninstall.packages("ggpubr")
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
shiny::runApp('Documents/J Balvin Project/Web App')
library(ggpubr)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
) %>% ggplotly()
runApp('Documents/J Balvin Project/Web App')
date <- Sys.Date()
date
# FIX THIS: get billboard_charts file with most recent date.
billboard_charts <- read.csv("billboard_charts_2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
file_name <- paste(artist_df_, date, sep = "")
file_name
file_name <- paste(artist_df_, date, sep = "")
file_name <- paste("artist_df_", date, sep = "")
file_name
# Read in billboard charts.
# FIX THIS: get billboard_charts file with most recent date.
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
shiny::runApp('Documents/J Balvin Project/Web App')
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
# Most recent date
most_recent_date <- billboard_charts$week[1]
most_recent_date
most_recent_date <- as.Date(billboard_charts$week[1])
#decade_ago_date <-
num_years = 10
num_weeks = num_years*52
first_date <- most_recent_date*num_weeks
# Most recent date
most_recent_date <- as.Date(billboard_charts$week[1])
most_recent_date
num_years = 10
num_weeks = num_years*52
num_weeks
first_date <- most_recent_date + num_weeks
first_date
first_date <- most_recent_date - num_weeks
first_date
num_years = 10
num_weeks = num_years*52
first_date <- most_recent_date - 7*num_weeks
first_date
decade_ago_date <- most_recent_date - (7*num_weeks-7)
decade_ago_date
?slice
# Slice billboard df to get up through decade_ago_date
billboard_charts <- billboard_charts %>% slice_head(n = (7*num_weeks-7))
View(billboard_charts)
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
decade_ago_date_index <- which(billboard_charts, week = decade_ago_date)
decade_ago_date_index <- which(billboard_charts, week == decade_ago_date)
decade_ago_date_index <- which(billboard_charts$week == decade_ago_date)
decade_ago_date_index
print(decade_ago_date_index)
decade_ago_date <- most_recent_date - (7*num_weeks-7)
decade_ago_date
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- read.csv("billboard-charts_2021-10-23.csv")
billboard_charts <- read.csv("billboard-charts_2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts_2021-10-23.csv")
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
View(billboard_charts)
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
# Get weeks from past decade
most_recent_date <- as.Date(billboard_charts$week[1])
num_years = 10
num_weeks = num_years*52
decade_ago_date <- most_recent_date - (7*num_weeks-7)
decade_ago_date_index <- which(billboard_charts$week == decade_ago_date)
decade_ago_date_index
decade_ago_date_index <- tail(which(billboard_charts$week == decade_ago_date), n = 1)
decade_ago_date_index
# Slice billboard df to get up through decade_ago_date
billboard_charts <- billboard_charts %>% slice_head(n = decade_ago_date_index)
View(billboard_charts)
billboard_charts <- read.csv("billboard_charts;2021-10-23.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
most_recent_date <- as.Date(billboard_charts$week[1])
num_years = 10
num_weeks = num_years*52
decade_ago_date <- most_recent_date - (7*num_weeks)
decade_ago_date_index <- tail(which(billboard_charts$week == decade_ago_date), n = 1)
decade_ago_date
decade_ago_date_index
# Slice billboard df to get up through decade_ago_date
billboard_charts <- billboard_charts %>% slice_head(n = decade_ago_date_index)
View(billboard_charts)
print(paste("Most recent date is:", most_recent_date))
print(paste("Most recent date is:", most_recent_date))
print(paste("One decade ago:", decade_ago_date))
print(paste("Sliced billboards. Week in top row:", head(billboard_charts$week, 1)))
print(paste("Sliced billboards. Week in bottom row:", tail(billboard_charts$week, 1)))
print(paste("Total number of rows:", NROW(billboard_charts)))
# 2017-08-26, 61 is blank. Delete blank artists (billboard problem).
# Get information for all (valid) artists.
artists <- unique(filter(billboard_charts, artist != "")$artist)
print(length(artists))
print(paste("Number of unique artists:", length(artists)))
artist_result <- map_df(artists, get_artist_df)
Sys.setenv(SPOTIFY_CLIENT_ID = '111c591bacc340e2b10d5bf3d0ee0308')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'e84ab3fcac7e4821ba33a9e05b3baa43')
Sys.setenv(GENIUS_API_TOKEN = 'QrL3LZ6y6KEuHi1DdLL1F3VFdGH_5S02WX7UiiMEadYQF82LEfv_H_mghPn00hbq')
access_token <- get_spotify_access_token()
print("Getting artist_df.")
artist_result <- map_df(artists, get_artist_df)
# Get artist information.
# Read in billboard charts.
# FIX THIS: get billboard_charts file with most recent date.
# Get all billboard files
# Sort them
# Helper function
# For each artist, obtain their basic info.
get_artist_df <- function(artists){
names <- c()
for (artist in artists) {
df <- search_spotify(
artist,
type = c("artist"),
limit = 1)
# Keep track of artists with no match.
if (NROW(df) == 0){
print("Couldn't find!")
print(artist)
names <- append(names, artist)
return()
}
else {
simplified_artist <- gsub(' |the|The|And|and|&|-|®|.','',artist) %>% tolower() %>% stringi::stri_trans_general("Latin-ASCII")
simplified_df_name <- gsub(' |the|The|And|and|&|-|®|.','',df$name) %>% tolower() %>% stringi::stri_trans_general("Latin-ASCII")
if (simplified_artist != simplified_df_name){
print(artist)
print(df$name)
}
return(df)
}
}
}
print("Getting artist_df.")
artist_result <- map_df(artists, get_artist_df)
#billboard_charts <- billboard_charts %>% slice_head(n = decade_ago_date_index)
billboard_charts <- billboard_charts %>% slice_head(n = 10)
View(billboard_charts)
print(paste("Sliced billboards. Week in top row:", head(billboard_charts$week, 1)))
print(paste("Sliced billboards. Week in bottom row:", tail(billboard_charts$week, 1)))
print(paste("Total number of rows:", NROW(billboard_charts)))
artists <- unique(filter(billboard_charts, artist != "")$artist)
print(paste("Number of unique artists:", length(artists)))
# For each artist, obtain their basic info.
print("***Getting artist_df...***")
artist_result <- map_df(artists, get_artist_df)
print("***Done getting artist_df.***")
View(artist_result)
manual_adds <- c("42MRYPhQfcEXqb18dl5ERX", "1YSA4byX5AL1zoTsSTlB03", "7qTSoObqlJkIybERfumbQ9", "0cuW2lF0YWb9VUyHOnvnsO")
manual_df <- map_df(manual_adds, get_artists)
artist_result <- rbind(artist_result, manual_df)
artist_result$genres <- sapply(artist_result$genres, genre_helper)
keep_cols <- c("id", "genres", "name", "popularity", "followers.total")
artist_df = artist_result[,(names(artist_result) %in% keep_cols)]
artist_df <- artist_df[, c(2, 3, 4, 5, 1)]
artist_df$type <- "billboard"
artist_df <- artist_df %>% unique()
View(artist_df)
date <- Sys.Date()
file_name <- paste("artist_df", date, sep = ";")
file_name
target_artist_id = "1vyhD5VmyZ7KMfW5gqLgo5"
target_artist_name = "J Balvin"
#target_artist_id = "2oQX8QiMXOyuqbcZEFsZfm"
#target_artist_name = "El Alfa"
#target_artist_id = "6eUKZXaKkcviH0Ku9w2n3V"
#target_artist_name = "Ed Sheeran"
#target_artist_id = "6vWDO969PvNqNYHIOW5v0m"
#target_artist_name = "Beyoncé"
#target_artist_id = "55Aa2cqylxrFIXC767Z865"
#target_artist_name = "Lil Wayne"
#target_artist_id = "4yvcSjfu4PC0CYQyLy4wSq"
#target_artist_name = "Glass Animals"
remix_color = "#00BA38"
file_name <- paste("jb_tracks_all", Sys.Date(), sep = ";")
file_name
jb_tracks_all <- get_artist_audio_features(
artist = target_artist_id,
include_groups = c("album", "single"),
dedupe_albums = TRUE
) %>% drop_na("track_id") %>% drop_na("album_type")
# Write to CSV so I don't have to fetch songs every time I load this document.
jb_tracks_all$artist_ids <- sapply(jb_tracks_all$artists, compress_artist_ids)
jb_tracks_all$artists <- sapply(jb_tracks_all$artists, compress_artist_names)
# Drop columns holding information I don't need.
drop_cols <- c("artist_name", "artist_id", "album_id", "album_images", "album_release_date_precision", "analysis_url", "available_markets", "disc_number", "explicit","track_href","is_local","track_preview_url","track_number", "track", "track_uri", "external_urls.spotify", "type", "time_signature", "mode", "loudness", "acousticness", "instrumentalness", "liveness", "key_name")
jb_tracks_all <- jb_tracks_all[,!(names(jb_tracks_all) %in% drop_cols)]
tracks_pop <- get_jb_tracks_pop(jb_tracks_all$track_id)
jb_tracks_all$track_popularity <- tracks_pop$popularity
file_name <- paste("jb_tracks_all", Sys.Date(), sep = ";")
write.csv(jb_tracks_all, file_name)
file_name <- paste(paste("jb_tracks_all", Sys.Date(), sep = ";"), ".csv", sep = "")
file_name
write.csv(jb_tracks_all, file_name)
file_name <- paste("jb_tracks_all", Sys.Date(), ".csv", sep = ";")
file_name
file_name <- paste("jb-tracks-all", Sys.Date(), ".csv", sep = "_")
file_name
# Credentials
Sys.setenv(SPOTIFY_CLIENT_ID = '111c591bacc340e2b10d5bf3d0ee0308')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'e84ab3fcac7e4821ba33a9e05b3baa43')
Sys.setenv(GENIUS_API_TOKEN = 'QrL3LZ6y6KEuHi1DdLL1F3VFdGH_5S02WX7UiiMEadYQF82LEfv_H_mghPn00hbq')
access_token <- get_spotify_access_token()
print("Credentials loaded")
print("Getting songs...")
jb_tracks_all <- get_artist_audio_features(
artist = target_artist_id,
include_groups = c("album", "single"),
dedupe_albums = TRUE
) %>% drop_na("track_id") %>% drop_na("album_type")
# Write to CSV so I don't have to fetch songs every time I load this document.
jb_tracks_all$artist_ids <- sapply(jb_tracks_all$artists, compress_artist_ids)
jb_tracks_all$artists <- sapply(jb_tracks_all$artists, compress_artist_names)
# Drop columns holding information I don't need.
drop_cols <- c("artist_name", "artist_id", "album_id", "album_images", "album_release_date_precision", "analysis_url", "available_markets", "disc_number", "explicit","track_href","is_local","track_preview_url","track_number", "track", "track_uri", "external_urls.spotify", "type", "time_signature", "mode", "loudness", "acousticness", "instrumentalness", "liveness", "key_name")
jb_tracks_all <- jb_tracks_all[,!(names(jb_tracks_all) %in% drop_cols)]
print("Got songs.")
print("Getting popularity...")
tracks_pop <- get_jb_tracks_pop(jb_tracks_all$track_id)
jb_tracks_all$track_popularity <- tracks_pop$popularity
print("Got popularity.")
file_name <- paste("jb-tracks-all", Sys.Date(), ".csv", sep = "_")
print(paste("File name:", file_name))
write.csv(jb_tracks_all, file_name)
print("Completed.")
write.csv(jb_tracks_all, file_name)
print("Completed.")
# Retrieve all of J Balvin's released tracks (albums and singles) from Spotify API.
getwd()
# Retrieve all of J Balvin's released tracks (albums and singles) from Spotify API.
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project")
# Retrieve all of J Balvin's released tracks (albums and singles) from Spotify API.
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App")
# Retrieve all of J Balvin's released tracks (albums and singles) from Spotify API.
getwd()
#____________________________________________________
#________________HELPER FUNCTIONS____________________
#____________________________________________________
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App")
#____________________________________________________
#________________HELPER FUNCTIONS____________________
#____________________________________________________
getwd()
View(artist_df)
date <- Sys.Date()
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App/artist-df")
file_name <- paste("artist_df", date, sep = ";")
write.csv(artist_df, file_name)
# For each artist, obtain their basic info.
get_artist_df <- function(artists){
names <- c()
for (artist in artists) {
df <- search_spotify(
artist,
type = c("artist"),
limit = 1)
# Keep track of artists with no match.
if (NROW(df) == 0){
print("Couldn't find!")
print(artist)
names <- append(names, artist)
return()
}
else {
simplified_artist <- gsub(' |the|The|And|and|&|-|®|.','',artist) %>% tolower() %>% stringi::stri_trans_general("Latin-ASCII")
simplified_df_name <- gsub(' |the|The|And|and|&|-|®|.','',df$name) %>% tolower() %>% stringi::stri_trans_general("Latin-ASCII")
if (simplified_artist != simplified_df_name){
print(paste("Mismatch:", artist, df$name))
}
return(df)
}
}
}
# Changes the genres column from a list to a string separated by semi-colons.
genre_helper <- function(genre){
if (length(genre) == 0) {
return(NA)
}
else {
return(paste(genre, collapse=";"))
}
}
# Read in billboard charts.
# FIX THIS: get billboard_charts file with most recent date.
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App/billboard-charts")
# Read in artists from billboard charts
billboard_charts <- read.csv("billboard-charts_2021-10-23_.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
file_name <- paste("artist-df", Sys.Date(), ".csv", sep = "_")
file_name
# Read in billboard charts.
# FIX THIS: get billboard_charts file with most recent date.
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App")
# Read in billboard charts.
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App")
billboard_charts <- read.csv("billboard-charts.csv")
billboard_charts <- billboard_charts[,!(names(billboard_charts) %in% c("X"))]
View(billboard_charts)
# Get weeks from past decade
most_recent_date <- as.Date(billboard_charts$week[1])
num_years = 10
num_weeks = num_years*52
decade_ago_date <- most_recent_date - (7*num_weeks)
decade_ago_date_index <- tail(which(billboard_charts$week == decade_ago_date), n = 1)
print(paste("Most recent date is:", most_recent_date))
print(paste("One decade ago:", decade_ago_date))
billboard_charts <- billboard_charts %>% slice_head(n = decade_ago_date_index)
print(paste("Sliced billboards. Week in top row:", head(billboard_charts$week, 1)))
print(paste("Sliced billboards. Week in bottom row:", tail(billboard_charts$week, 1)))
print(paste("Total number of rows:", NROW(billboard_charts)))
# 2017-08-26, 61 is blank. Delete blank artists (billboard problem).
# Get information for all (valid) artists.
artists <- unique(filter(billboard_charts, artist != "")$artist)
print(paste("Number of unique artists:", length(artists)))
file_name <- paste("artist-df", Sys.Date(), ".csv", sep = "_")
file_name
file_name <- paste("jb-tracks-all", Sys.Date(), ".csv", sep = "_")
print(paste("File name:", file_name))
# Retrieve all of J Balvin's released tracks (albums and singles) from Spotify API.
# Spotify credentials
Sys.setenv(SPOTIFY_CLIENT_ID = '111c591bacc340e2b10d5bf3d0ee0308')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'e84ab3fcac7e4821ba33a9e05b3baa43')
Sys.setenv(GENIUS_API_TOKEN = 'QrL3LZ6y6KEuHi1DdLL1F3VFdGH_5S02WX7UiiMEadYQF82LEfv_H_mghPn00hbq')
access_token <- get_spotify_access_token()
print("Credentials loaded")
print("Getting songs...")
jb_tracks_all <- get_artist_audio_features(
artist = target_artist_id,
include_groups = c("album", "single"),
dedupe_albums = TRUE
) %>% drop_na("track_id") %>% drop_na("album_type")
# Write to CSV so I don't have to fetch songs every time I load this document.
jb_tracks_all$artist_ids <- sapply(jb_tracks_all$artists, compress_artist_ids)
jb_tracks_all$artists <- sapply(jb_tracks_all$artists, compress_artist_names)
# Drop columns holding information I don't need.
drop_cols <- c("artist_name", "artist_id", "album_id", "album_images", "album_release_date_precision", "analysis_url", "available_markets", "disc_number", "explicit","track_href","is_local","track_preview_url","track_number", "track", "track_uri", "external_urls.spotify", "type", "time_signature", "mode", "loudness", "acousticness", "instrumentalness", "liveness", "key_name")
jb_tracks_all <- jb_tracks_all[,!(names(jb_tracks_all) %in% drop_cols)]
print("Got songs.")
print("Getting popularity...")
tracks_pop <- get_jb_tracks_pop(jb_tracks_all$track_id)
jb_tracks_all$track_popularity <- tracks_pop$popularity
print("Got popularity.")
file_name <- paste("jb-tracks-all", Sys.Date(), ".csv", sep = "_")
print(paste("File name:", file_name))
setwd("/Users/lindsaymaggioncalda/Documents/J Balvin Project/Web App/jb-tracks-all")
write.csv(jb_tracks_all, file_name)
print("Completed.")
runApp('~/Documents/J Balvin Project/Web App')
runApp('~/Documents/J Balvin Project/Web App')
runApp()
runApp('~/Documents/J Balvin Project/Web App')
runApp()
runApp('~/Documents/J Balvin Project/Web App')
runApp()
types_chosen_numtracks <- c("remix")
colors <- switch(types_chosen_numtracks,
NULL = c(remix_color),
c("remix") = c(remix_color),
types_chosen_numtracks <- c("remix")
types_chosen_numtracks
colors <- switch(types_chosen_numtracks,
"remix" = c(remix_color),
"album" = c(album_color),
"single" = c(single_color),
c("album", "remix") = c(album_color, remix_color),
colors <- switch(types_chosen_numtracks,
"remix" = remix_color,
"album" = album_color,
"single" = single_color,
c("album", "remix") = c(album_color, remix_color),
types_chosen_numtracks == c("remix")
colors <- switch(types_chosen_numtracks,
c("remix") = c(remix_color),
types_chosen_numtracks <- c("remix")
colors <- {
if(types_chosen_numtracks() == c("remix")){
c(remix_color)
}
else if(types_chosen_numtracks() == c("album")){
c(album_color)
}
else if(types_chosen_numtracks() == c("single")){
c(single_color)
}
else if(types_chosen_numtracks() == c("album", "remix")){
c(album_color, remix_color)
}
else if(types_chosen_numtracks() == c("single", "album")){
c(single_color, album_color)
}
else if(types_chosen_numtracks() == c("single", "remix")){
c(single_color, remix_color)
}
else if(types_chosen_numtracks() == c("single", "album", "remix")){
c(single_color, album_color, remix_color)
}
else {
c(single_color, album_color, remix_color)
}
}
colors <- {
if(types_chosen_numtracks == c("remix")){
c(remix_color)
}
else if(types_chosen_numtracks == c("album")){
c(album_color)
}
else if(types_chosen_numtracks == c("single")){
c(single_color)
}
else if(types_chosen_numtracks == c("album", "remix")){
c(album_color, remix_color)
}
else if(types_chosen_numtracks == c("single", "album")){
c(single_color, album_color)
}
else if(types_chosen_numtracks == c("single", "remix")){
c(single_color, remix_color)
}
else if(types_chosen_numtracks == c("single", "album", "remix")){
c(single_color, album_color, remix_color)
}
else {
c(single_color, album_color, remix_color)
}
}
colors
runApp('~/Documents/J Balvin Project/Web App')
runApp('~/Documents/J Balvin Project/Web App')
runApp()
runApp('~/Documents/J Balvin Project/Web App')
runApp('~/Documents/J Balvin Project/Web App')
runApp('~/Documents/J Balvin Project/Web App')
