country <- apply(artist_vertices, 1, contains_certain_genre, c("country"))
pop <- apply(artist_vertices, 1, contains_certain_genre, c("pop"))
latin <- apply(artist_vertices, 1, contains_certain_genre, c("latin", "colombian", "mexica"))
edm <- apply(artist_vertices, 1, contains_certain_genre, c("techno", "edm", "house", "dubstep", "trance"))
soul_jazz <- apply(artist_vertices, 1, contains_certain_genre, c("jazz", "soul", "funk", "r&b"))
artist_vertices <- artist_vertices %>% mutate(main_genre = case_when(
edm ~ 'edm, techno, house',
country ~ 'country',
latin ~ 'latin',
soul_jazz ~ 'jazz, soul, r&b',
rock ~ 'rock',
pop ~ 'pop',
hip_hop_rap_rbnb ~ 'hip hop, rap',
TRUE ~ 'other'))
index <- which(artist_vertices$name == target_artist_name)
jb_genres <- artist_vertices[index,]$genres
jb_genres <-get_genres(jb_genres)
# Function that returns is_genre for every genre of artist
get_genres <- function(genre_string){
if (str_contains(genre_string, ";", )){
genres <- unlist(strsplit(genre_string, ";"))
# FIX THIS: Sort alphabetically
}
else {
genres <- c(genre_string)
}
return(genres)
}
i <- 1
# Goal: new column for each genre that holds TRUE or FALSE (whether artist contains that genre).
while (i < length(jb_genres)+1) {
genre <-jb_genres[i]
bool_vec <- apply(artist_vertices, 1, contains_certain_genre, c(genre))
artist_vertices[, genre] <- bool_vec
i <- i+1
}
# Reggaeton info
#is_reggaetonero <- apply(artist_vertices, 1, contains_certain_genre, c("reggaeton", "trap latino"))
#artist_vertices$is_reggaetonero <- is_reggaetonero
# Build graph.
#artist_network <- graph_from_data_frame(d=unique(edge_ids), vertices = unique(artist_vertices), directed = FALSE)
# Make a palette of colors
coul  <- c('#f58231', '#ffe119', '#3cb44b', '#dcbeff', '#4363d8', '#f032e6', '#aaffc3', "#ffd8b1")
reg_col  <- c('#000000', '#0096FF')
artist_col <- c('#0096FF','FF0000')
# Create a vector of color
#my_color <- coul[as.numeric(as.factor(V(artist_network)$main_genre))]
#reg_color <- reg_col[as.numeric(as.factor(V(artist_network)$is_reggaetonero))]
betweenness <- betweenness(artist_network)
degree <- degree(artist_network)
artist_vertices$degree <- degree
artist_vertices <- read.csv("artist_vertices_10-23-2021.csv")
artist_vertices <- artist_vertices[,!(names(artist_vertices) %in% c("X"))]
# Extract important genre info for coloring the vertices.
hip_hop_rap_rbnb <- apply(artist_vertices, 1, contains_certain_genre, c("hip hop", "rap"))
rock <- apply(artist_vertices, 1, contains_certain_genre, c("rock"))
country <- apply(artist_vertices, 1, contains_certain_genre, c("country"))
pop <- apply(artist_vertices, 1, contains_certain_genre, c("pop"))
latin <- apply(artist_vertices, 1, contains_certain_genre, c("latin", "colombian", "mexica"))
edm <- apply(artist_vertices, 1, contains_certain_genre, c("techno", "edm", "house", "dubstep", "trance"))
soul_jazz <- apply(artist_vertices, 1, contains_certain_genre, c("jazz", "soul", "funk", "r&b"))
artist_vertices <- artist_vertices %>% mutate(main_genre = case_when(
edm ~ 'edm, techno, house',
country ~ 'country',
latin ~ 'latin',
soul_jazz ~ 'jazz, soul, r&b',
rock ~ 'rock',
pop ~ 'pop',
hip_hop_rap_rbnb ~ 'hip hop, rap',
TRUE ~ 'other'))
index <- which(artist_vertices$name == target_artist_name)
jb_genres <- artist_vertices[index,]$genres
jb_genres <-get_genres(jb_genres)
# Function that returns is_genre for every genre of artist
get_genres <- function(genre_string){
if (str_contains(genre_string, ";", )){
genres <- unlist(strsplit(genre_string, ";"))
# FIX THIS: Sort alphabetically
}
else {
genres <- c(genre_string)
}
return(genres)
}
i <- 1
# Goal: new column for each genre that holds TRUE or FALSE (whether artist contains that genre).
while (i < length(jb_genres)+1) {
genre <-jb_genres[i]
bool_vec <- apply(artist_vertices, 1, contains_certain_genre, c(genre))
artist_vertices[, genre] <- bool_vec
i <- i+1
}
write.csv(artist_vertices, "artist_vertices2_10-23-2021.csv")
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
within_genres <- artist_vertices
View(within_genres)
selected_genres <- reactive(c("latin"))
selected_genres
selected_genres <- (c("latin"))
selected_genres
#PLAYGROUND
within_genres <- artist_vertices
selected_genres <- (c("latin"))
i <- 1
while (i < length(selected_genres)+1){
print(selected_genres[i])
within_genres <- within_genres %>% filter(selected_genres[i] == TRUE)
i = i+1
print(within_genres)
}
datatable(
within_genres, caption = "fill in later", options = list(
dom = 'Bfrtip',
pageLength = index,
scrollX = TRUE
)
)
within_genres <- artist_vertices
View(within_genres)
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(selected_genres[i] == TRUE)
i = i + 1
}
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (c("latin"))
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(selected_genres[i] == TRUE)
i = i + 1
}
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (c("latin"))
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
View(within_genres)
datatable(
within_genres,
caption = "fill in later",
options = list(
dom = 'Bfrtip',
pageLength = index,
scrollX = TRUE
)
)
within_genres <- artist_vertices
selected_genres <- (c("reggaeton"))
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
datatable(
within_genres,
caption = "fill in later",
options = list(
dom = 'Bfrtip',
pageLength = index,
scrollX = TRUE
)
)
View(within_genres)
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (c("reggaeton", "reggaeton colombiano"))
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
datatable(
within_genres,
caption = "fill in later",
options = list(
dom = 'Bfrtip',
pageLength = index,
scrollX = TRUE
)
)
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (c("reggaeton", "reggaeton colombiano", "trap latino"))
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (NULL)
# AND
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
View(within_genres)
within_genres <- artist_vertices
selected_genres <- (NULL)
if (is.null(selected_genres)){
within_genres <- NULL
} else {
# AND
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
}
within_genres
within_genres <- artist_vertices
selected_genres <- c("latin, trap latino")
if (is.null(selected_genres)){
within_genres <- NULL
} else {
# AND
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
}
within_genres <- artist_vertices
selected_genres <- c("latin", "trap latino")
if (is.null(selected_genres)){
within_genres <- NULL
} else {
# AND
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
}
View(within_genres)
within_genres <- artist_vertices
selected_genres <- c("reggaeton", "trap latino")
selected_genres <- c("reggaeton", "trap latino")
# OR
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
View(within_genres)
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
View(within_genres)
i <- 2
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
View(within_genres)
selected_genres <- c("reggaeton", "trap latino")
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
View(within_genres)
i <- 2
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
View(next_genre)
View(within_genres)
187+225
within_genres <- unique(within_genres)
View(within_genres)
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
i <- 2
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
within_genres <- unique(within_genres)
View(within_genres)
selected_genres <- c("latin", "reggaeton colombiano")
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
i <- 2
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
within_genres <- unique(within_genres)
View(within_genres)
selected_genres <- c("trap latino", "reggaeton colombiano")
within_genres <- NULL
if (length(selected_genres >= 1)){
first_genre <- selected_genres[1]
print(first_genre)
within_genres <- artist_vertices %>% filter(get(first_genre) == TRUE)
}
i <- 2
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
next_genre <- artist_vertices %>% filter(get(selected_genres[i]) == TRUE)
within_genres <- rbind(within_genres, next_genre)
i = i + 1
}
within_genres <- unique(within_genres)
View(within_genres)
within_genres <- artist_vertices
selected_genres <- c("trap latino", "reggaeton colombiano")
if (is.null(selected_genres)){
within_genres <- NULL
} else {
# AND
i <- 1
while (i < length(selected_genres) + 1) {
print(selected_genres[i])
within_genres <- within_genres %>% filter(get(selected_genres[i]) == TRUE)
i = i + 1
}
}
View(within_genres)
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp()
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
shiny::runApp('Documents/J Balvin Project/Web App')
shiny::runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
View(artist_vertices)
View(artist_vertices)
artist_vertices <- read.csv("artist_vertices2_10-23-2021.csv")
artist_vertices <- read.csv("artist_vertices2_10-23-2021.csv")
artist_vertices <- artist_vertices[,!(names(artist_vertices) %in% c("X"))]
View(artist_vertices)
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
install.Packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
library(ggpubr)
font("x.text", size = 8, vjust = 0.5)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
shiny::runApp('Documents/J Balvin Project/Web App')
uninstall.packages("ggpubr")
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
shiny::runApp('Documents/J Balvin Project/Web App')
library(ggpubr)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)+
font("x.text", size = 8, vjust = 0.5)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
)
ggdotchart(artist_vertices, x = "name", y = "popularity",
color = "type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
sorting = "asc", sort.by.groups = TRUE,
add = "segments",
add.params = list(color = "lightgray", size = 2),
group = "type",
dot.size = 4,
ggtheme = theme_pubclean()
) %>% ggplotly()
runApp('Documents/J Balvin Project/Web App')
shiny::runApp('Documents/J Balvin Project/Web App')
runApp('Documents/J Balvin Project/Web App')
shiny::runApp('Documents/J Balvin Project/Web App')
